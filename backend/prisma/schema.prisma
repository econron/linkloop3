// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  lastLoginAt     DateTime         @updatedAt
  unitProgress    UnitProgress[]
  phonemeProgress PhonemeProgress[]
  phonemeErrorSummaries PhonemeErrorSummary[]
  pronunciationHabits PronunciationHabit[]
  analyses        PronunciationAnalysis[]
  experienceHistories ExperienceHistory[]
  comboHistories  ComboHistory[]
  questProgresses QuestProgress[]
  rankingCache    RankingCache?
}

model UnitProgress {
  id            String   @id @default(uuid())
  userId        String
  unitId        String
  status        String   // 'locked' | 'unlocked' | 'completed'
  lastAttempted DateTime
  completedAt   DateTime?
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, unitId])
}

model PhonemeProgress {
  id            String   @id @default(uuid())
  userId        String
  phoneme       String
  attempts      Int      @default(0)
  averageScore  Float
  bestScore     Float
  lastScore     Float
  lastAttempted DateTime
  user          User     @relation(fields: [userId], references: [id])
}

model PhonemeErrorSummary {
  id                String   @id @default(uuid())
  userId            String
  intendedPhoneme   String
  actualPhoneme     String
  errorCount        Int      @default(1)
  lastOccurredAt    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, intendedPhoneme, actualPhoneme])
  @@index([userId, lastOccurredAt])
}

model PronunciationHabit {
  id            String   @id @default(uuid())
  userId        String
  phoneme       String
  confusedWith  String
  accuracyScore Float
  lastOccurredAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, phoneme, confusedWith])
  @@index([userId, lastOccurredAt])
}

model Unit {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  metadata    String   @default("{}") 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  analyses    PronunciationAnalysis[]
}

model PronunciationAnalysis {
  id          Int      @id @default(autoincrement())
  userId      String
  unitId      Int
  overallScore Float
  accuracyScore Float
  fluencyScore Float
  prosodyScore Float
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  findings    PronunciationFinding[]
}

model PronunciationFinding {
  id          Int      @id @default(autoincrement())
  analysisId  Int
  type        String   // 'ERROR' | 'HABIT' | 'PROSODY'
  phoneme     String
  details     String   @default("{}")
  createdAt   DateTime @default(now())

  analysis    PronunciationAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model ExperienceHistory {
  id        String   @id @default(uuid())
  userId    String
  amount    Int
  reason    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model ComboHistory {
  id         String   @id @default(uuid())
  userId     String
  comboCount Int
  feverTime  Boolean
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model QuestProgress {
  id         String   @id @default(uuid())
  userId     String
  questId    String
  type       String   // 'daily' | 'weekly' | 'achievement'
  progress   Int
  target     Int
  completed  Boolean  @default(false)
  rewardXp   Int
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, questId])
  @@index([userId, type, completed])
}

model RankingCache {
  userId    String   @id
  totalXp   Int
  weeklyXp  Int
  dailyXp   Int
  rank      Int
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
